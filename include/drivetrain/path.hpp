#ifdef _DRIVETRAIN_HPP_
#ifndef _PATH_HPP_
#define _PATH_HPP_

/**
 * Separate file for Drivetrain::Path data structure declaration
 * included in drivetrain.hpp
 *
 * Path stores velocities for every 10msec of a motion to be used by Drivetrain movement functions
 *
 * Static members generate profiles and store them in an instance of this class
 */

class Drivetrain::Path final {
public:

    // Motion profile data struct, stored in internal array
    // x and y extensions are used (followed at a look ahead distance) for feedback error correction
    // Feedback error correction uses similar ideas to pure pursuit
    struct Velocities {

        int linearVoltage;
        int rotVoltage;
        
        long double xExtension;
        long double yExtension;
    
    };

    // copy constructor
    Path(const Path& path);
    // move constructor
    Path(Path&& path);

    // constructor to initialize a Path from a pre-generated array
    // This is for profiles generated by external programs
    Path(Velocities* path, size_t length, Point target, long double lookAheadDist);

    // destructor
    ~Path();

    // disallow copy assignment
    void operator=(const Path&) = delete;

    // Store an action to be executed during the next movement
    Path& withAction(std::function<void()>&& action, double dist);

    // Motion profile generation functions
    // Those without a lookAheadDist parameter are pointed to by function pointers in the drive namespace for easier calls
    static Path generatePathTo(Point point);
    static Path generatePath(Point start, Point end);
    static Path generatePathTo(Point point, long double lookAheadDist);
    static Path generatePath(Point start, Point end, long double lookAheadDist);

    // Index the internal array
    const Velocities& operator[](size_t index) const;

    // Get iterators, implement for each loop functionality
    const Velocities* begin() const;
    const Velocities* end() const;

    // Get the size (not capacity) of the internal array
    size_t size() const;

    // Allow Drivetrain movement functions to access lookAheadDistance, target
    friend class Drivetrain;

private:

    // Initialize a Path, called by motion profile generating functions
    Path(Point target, long double lookAheadDist);

    // Store the final target (for determining when to execute stored actions)
    Point target;

    // Internal array storing motion profile data
    Velocities* data;

    // Stores information about array memory allocation
    size_t length;
    size_t capacity;

    // Stores the lookAheadDistance (for feedback error correction)
    const long double lookAheadDistance;

    // Adds a new Velocities to the internal array, reallocates memory if needed
    void add(int linearVoltage, int rotVoltage, long double xExtension, long double yExtension);

};

#endif
#endif